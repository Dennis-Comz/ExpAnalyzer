
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 3d0ae71)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import objects.Error_;
import objects.*;
import references.*;
import proyecto1.*;
import objects.BinaryTree.Tree_Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 3d0ae71) generated parser.
  */
@SuppressWarnings("unused")
public class Sintactico extends java_cup.runtime.lr_parser {

 @Override
 public final Class<?> getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\011\011\000\002\004\007\000" +
    "\002\005\006\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\002\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\012\005\001\002\000\004\002\145\001" +
    "\002\000\016\005\015\013\006\022\012\023\010\026\011" +
    "\027\020\001\002\000\004\002\ufffb\001\002\000\016\005" +
    "\015\013\006\022\012\023\010\026\011\027\020\001\002" +
    "\000\014\013\ufff3\017\ufff3\021\ufff3\026\141\027\140\001" +
    "\002\000\010\013\ufff1\017\ufff1\021\ufff1\001\002\000\004" +
    "\017\053\001\002\000\006\017\025\021\024\001\002\000" +
    "\004\002\000\001\002\000\016\005\015\013\006\022\012" +
    "\023\010\026\011\027\020\001\002\000\016\005\015\013" +
    "\006\022\012\023\010\026\011\027\020\001\002\000\016" +
    "\005\015\013\006\022\012\023\010\026\011\027\020\001" +
    "\002\000\010\013\ufff2\017\ufff2\021\ufff2\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\ufffc\001\002\000\004\011\030\001\002\000\004\025\026" +
    "\001\002\000\004\020\027\001\002\000\016\005\ufff8\013" +
    "\ufff8\022\ufff8\023\ufff8\026\ufff8\027\ufff8\001\002\000\020" +
    "\004\033\006\031\007\036\012\035\014\034\015\032\025" +
    "\040\001\002\000\020\004\033\006\031\007\036\012\035" +
    "\014\034\015\032\025\040\001\002\000\020\004\033\006" +
    "\031\007\036\012\035\014\034\015\032\025\040\001\002" +
    "\000\020\004\033\006\031\007\036\012\035\014\034\015" +
    "\032\025\040\001\002\000\020\004\033\006\031\007\036" +
    "\012\035\014\034\015\032\025\040\001\002\000\010\023" +
    "\010\026\011\027\020\001\002\000\020\004\033\006\031" +
    "\007\036\012\035\014\034\015\032\025\040\001\002\000" +
    "\004\020\041\001\002\000\022\004\uffc9\006\uffc9\007\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\020\uffc9\025\uffc9\001\002\000" +
    "\016\005\ufff9\013\ufff9\022\ufff9\023\ufff9\026\ufff9\027\ufff9" +
    "\001\002\000\022\004\uffcb\006\uffcb\007\uffcb\012\uffcb\014" +
    "\uffcb\015\uffcb\020\uffcb\025\uffcb\001\002\000\004\013\044" +
    "\001\002\000\022\004\uffca\006\uffca\007\uffca\012\uffca\014" +
    "\uffca\015\uffca\020\uffca\025\uffca\001\002\000\020\004\033" +
    "\006\031\007\036\012\035\014\034\015\032\025\040\001" +
    "\002\000\022\004\uffcd\006\uffcd\007\uffcd\012\uffcd\014\uffcd" +
    "\015\uffcd\020\uffcd\025\uffcd\001\002\000\022\004\uffcc\006" +
    "\uffcc\007\uffcc\012\uffcc\014\uffcc\015\uffcc\020\uffcc\025\uffcc" +
    "\001\002\000\020\004\033\006\031\007\036\012\035\014" +
    "\034\015\032\025\040\001\002\000\022\004\uffce\006\uffce" +
    "\007\uffce\012\uffce\014\uffce\015\uffce\020\uffce\025\uffce\001" +
    "\002\000\022\004\uffcf\006\uffcf\007\uffcf\012\uffcf\014\uffcf" +
    "\015\uffcf\020\uffcf\025\uffcf\001\002\000\010\023\010\026" +
    "\011\027\020\001\002\000\004\021\055\001\002\000\004" +
    "\011\056\001\002\000\040\004\070\005\071\006\062\007" +
    "\074\011\067\012\077\013\061\014\075\015\063\017\060" +
    "\021\073\023\064\025\057\026\065\027\076\001\002\000" +
    "\044\004\070\005\071\006\062\007\074\011\067\012\077" +
    "\013\061\014\075\015\063\016\102\017\060\020\uffdb\021" +
    "\073\023\101\025\100\026\105\027\103\001\002\000\046" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\001\002\000" +
    "\046\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\001\002" +
    "\000\046\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\001" +
    "\002\000\046\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\001\002\000\046\004\070\005\071\006\062\007\074\010" +
    "\134\011\067\012\077\013\061\014\075\015\063\016\102" +
    "\017\060\020\uffdb\021\073\023\101\025\100\026\105\027" +
    "\103\001\002\000\046\004\070\005\071\006\062\007\074" +
    "\010\131\011\067\012\077\013\061\014\075\015\063\016" +
    "\102\017\060\020\uffdb\021\073\023\101\025\100\026\105" +
    "\027\103\001\002\000\004\020\130\001\002\000\046\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\001\002\000\046" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\025\uffda\026\uffda\027\uffda\001\002\000" +
    "\046\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\001\002" +
    "\000\046\004\070\005\071\006\062\007\074\010\124\011" +
    "\067\012\077\013\061\014\075\015\063\016\102\017\060" +
    "\020\uffdb\021\073\023\101\025\100\026\105\027\103\001" +
    "\002\000\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\001\002\000\046\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\023\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\001\002\000\046\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\001\002\000\046\004\070\005\071\006\062\007" +
    "\074\010\106\011\067\012\077\013\061\014\075\015\063" +
    "\016\102\017\060\020\uffdb\021\073\023\101\025\100\026" +
    "\105\027\103\001\002\000\046\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\001\002\000\004\020\uffdd\001\002\000" +
    "\004\020\uffe0\001\002\000\040\004\070\005\071\006\062" +
    "\007\074\011\067\012\077\013\061\014\075\015\063\017" +
    "\060\021\073\023\113\025\112\026\114\027\116\001\002" +
    "\000\004\020\uffde\001\002\000\004\020\uffdc\001\002\000" +
    "\004\020\uffdf\001\002\000\032\004\070\005\071\006\062" +
    "\007\074\011\067\012\077\013\061\014\075\015\063\017" +
    "\060\021\073\027\111\001\002\000\004\020\uffee\001\002" +
    "\000\004\020\uffe6\001\002\000\004\020\uffe9\001\002\000" +
    "\044\004\070\005\071\006\062\007\074\011\067\012\077" +
    "\013\061\014\075\015\063\016\102\017\060\020\uffdb\021" +
    "\073\023\101\025\100\026\105\027\103\001\002\000\044" +
    "\004\070\005\071\006\062\007\074\011\067\012\077\013" +
    "\061\014\075\015\063\016\102\017\060\020\uffdb\021\073" +
    "\023\101\025\100\026\105\027\103\001\002\000\044\004" +
    "\070\005\071\006\062\007\074\011\067\012\077\013\061" +
    "\014\075\015\063\016\102\017\060\020\uffdb\021\073\023" +
    "\101\025\100\026\105\027\103\001\002\000\044\004\070" +
    "\005\071\006\062\007\074\011\067\012\077\013\061\014" +
    "\075\015\063\016\102\017\060\020\uffdb\021\073\023\101" +
    "\025\100\026\105\027\103\001\002\000\044\004\070\005" +
    "\071\006\062\007\074\011\067\012\077\013\061\014\075" +
    "\015\063\016\102\017\060\020\uffdb\021\073\023\101\025" +
    "\100\026\105\027\103\001\002\000\004\020\uffe3\001\002" +
    "\000\004\020\uffe1\001\002\000\004\020\uffe4\001\002\000" +
    "\004\020\uffe5\001\002\000\004\020\uffe2\001\002\000\032" +
    "\004\070\005\071\006\062\007\074\011\067\012\077\013" +
    "\061\014\075\015\063\017\060\021\073\027\127\001\002" +
    "\000\004\020\uffec\001\002\000\004\020\uffe7\001\002\000" +
    "\004\020\uffe8\001\002\000\016\005\ufffa\013\ufffa\022\ufffa" +
    "\023\ufffa\026\ufffa\027\ufffa\001\002\000\004\026\133\001" +
    "\002\000\004\020\uffef\001\002\000\004\020\uffea\001\002" +
    "\000\004\023\136\001\002\000\004\020\ufff0\001\002\000" +
    "\004\020\uffeb\001\002\000\004\020\uffed\001\002\000\016" +
    "\013\ufff4\017\ufff4\021\ufff4\023\010\026\011\027\020\001" +
    "\002\000\016\013\ufff5\017\ufff5\021\ufff5\023\010\026\011" +
    "\027\020\001\002\000\010\013\ufff7\017\ufff7\021\ufff7\001" +
    "\002\000\010\013\ufff6\017\ufff6\021\ufff6\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\013\004\016\005\015\007\012\011\006\001\001" +
    "\000\002\001\001\000\014\003\143\004\016\005\015\007" +
    "\012\011\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\022\004\016\005\015\007\012\011\006\001\001" +
    "\000\014\003\021\004\016\005\015\007\012\011\006\001" +
    "\001\000\014\003\020\004\016\005\015\007\012\011\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\004\006\051\001\001\000\004\006\047\001\001" +
    "\000\004\006\046\001\001\000\004\006\044\001\001\000" +
    "\004\007\042\001\001\000\004\006\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\065\014\071\001\001\000\006\012\136\014\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\134\014\103\001\001" +
    "\000\006\012\131\014\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\124\014\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\106\014\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\122" +
    "\014\103\001\001\000\006\012\121\014\103\001\001\000" +
    "\006\012\120\014\103\001\001\000\006\012\117\014\103" +
    "\001\001\000\006\012\116\014\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\142\001\001\000\004\007\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol>    stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        ErrorRef.list.addError(new Error_("Se ha detectado un error de sintaxis.", "SINTACTICO", String.valueOf(s.value), String.valueOf(s.left), String.valueOf(s.right)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        // ErrorRef.list.addError(new Error_("Error de Sintaxis -> No se esperaba: ", "SINTACTICO IRRECUPERABLE", String.valueOf(s.value), String.valueOf(s.left), String.valueOf(s.right)));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack<java_cup.runtime.Symbol>    CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= LLAVEIZQ instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= conjunto instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= regex instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= expresion instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= PORCENTAJE instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjunto ::= CONJ DOSPT variable GUION MAYORQUE parametro PTCOMA 
            {
              Object RESULT =null;
		int nameleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nameright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object name = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4).<Object>value();
		int interleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int interright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object inter = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		if(inter != null){Conjunto.list.addParam(new Intervalo(new String(name.toString()), new String(inter.toString())));}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conjunto",7, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // regex ::= variable GUION MAYORQUE bloque_regex PTCOMA 
            {
              Object RESULT =null;
		int nameleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nameright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object name = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4).<Object>value();
		int brgleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int brgright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object brg = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		if(brg != null){Tree.list.addTree(new String(name.toString()),(Tree_Node)brg);}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",2, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= variable DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int nameleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nameright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object name = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3).<Object>value();
		int valorleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String valor = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		if(valor != null){Cadena.list.addCadena(new String(name.toString()), new String(valor.toString()));}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= LETRA ENTERO variable 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int eleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int vleft = (CUP$Sintactico$stack.peek()).left;
		int vright = (CUP$Sintactico$stack.peek()).right;
		Object v = CUP$Sintactico$stack.peek().<Object>value();
		RESULT=l+e+v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= LETRA SIMBOLO variable 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int sleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int vleft = (CUP$Sintactico$stack.peek()).left;
		int vright = (CUP$Sintactico$stack.peek()).right;
		Object v = CUP$Sintactico$stack.peek().<Object>value();
		RESULT=l+s+v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= LETRA ENTERO 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int eleft = (CUP$Sintactico$stack.peek()).left;
		int eright = (CUP$Sintactico$stack.peek()).right;
		String e = CUP$Sintactico$stack.peek().<String>value();
		RESULT=l+e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable ::= LETRA SIMBOLO 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int sleft = (CUP$Sintactico$stack.peek()).left;
		int sright = (CUP$Sintactico$stack.peek()).right;
		String s = CUP$Sintactico$stack.peek().<String>value();
		RESULT=l+s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable ::= LETRA 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.peek()).left;
		int lright = (CUP$Sintactico$stack.peek()).right;
		String l = CUP$Sintactico$stack.peek().<String>value();
		RESULT=l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable ::= SIMBOLO 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.peek()).left;
		int sright = (CUP$Sintactico$stack.peek()).right;
		String s = CUP$Sintactico$stack.peek().<String>value();
		RESULT=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = (CUP$Sintactico$stack.peek()).left;
		int eright = (CUP$Sintactico$stack.peek()).right;
		String e = CUP$Sintactico$stack.peek().<String>value();
		RESULT=e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",5, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= LETRA bloque_coma 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int rleft = (CUP$Sintactico$stack.peek()).left;
		int rright = (CUP$Sintactico$stack.peek()).right;
		Object r = CUP$Sintactico$stack.peek().<Object>value();
		RESULT = (l.toString()+r.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro ::= ENTERO bloque_coma 
            {
              Object RESULT =null;
		int eleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int rleft = (CUP$Sintactico$stack.peek()).left;
		int rright = (CUP$Sintactico$stack.peek()).right;
		Object r = CUP$Sintactico$stack.peek().<Object>value();
		RESULT = (e.toString()+r.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= SIMBOLO bloque_coma 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int rleft = (CUP$Sintactico$stack.peek()).left;
		int rright = (CUP$Sintactico$stack.peek()).right;
		Object r = CUP$Sintactico$stack.peek().<Object>value();
		RESULT = (s.toString()+r.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= CADENA bloque_coma 
            {
              Object RESULT =null;
		int cleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int rleft = (CUP$Sintactico$stack.peek()).left;
		int rright = (CUP$Sintactico$stack.peek()).right;
		Object r = CUP$Sintactico$stack.peek().<Object>value();
		RESULT = (c.toString()+r.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= simbs_varios bloque_coma 
            {
              Object RESULT =null;
		int svleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int svright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object sv = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		int rleft = (CUP$Sintactico$stack.peek()).left;
		int rright = (CUP$Sintactico$stack.peek()).right;
		Object r = CUP$Sintactico$stack.peek().<Object>value();
		RESULT = (sv.toString()+r.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= LETRA SYM_ENIE LETRA 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int l2left = (CUP$Sintactico$stack.peek()).left;
		int l2right = (CUP$Sintactico$stack.peek()).right;
		String l2 = CUP$Sintactico$stack.peek().<String>value();
		RESULT=l+"~"+l2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= ENTERO SYM_ENIE ENTERO 
            {
              Object RESULT =null;
		int eleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String e = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int e2left = (CUP$Sintactico$stack.peek()).left;
		int e2right = (CUP$Sintactico$stack.peek()).right;
		String e2 = CUP$Sintactico$stack.peek().<String>value();
		RESULT=e+"~"+e2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro ::= SIMBOLO SYM_ENIE SIMBOLO 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String s = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int s2left = (CUP$Sintactico$stack.peek()).left;
		int s2right = (CUP$Sintactico$stack.peek()).right;
		String s2 = CUP$Sintactico$stack.peek().<String>value();
		RESULT=s+"~"+s2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro ::= simbs_varios SYM_ENIE SIMBOLO 
            {
              Object RESULT =null;
		int svleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int svright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object sv = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<Object>value();
		int sleft = (CUP$Sintactico$stack.peek()).left;
		int sright = (CUP$Sintactico$stack.peek()).right;
		String s = CUP$Sintactico$stack.peek().<String>value();
		RESULT=sv.toString()+"~"+s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametro ::= simbs_varios SYM_ENIE simbs_varios 
            {
              Object RESULT =null;
		int svleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int svright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object sv = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<Object>value();
		int sv2left = (CUP$Sintactico$stack.peek()).left;
		int sv2right = (CUP$Sintactico$stack.peek()).right;
		Object sv2 = CUP$Sintactico$stack.peek().<Object>value();
		RESULT=sv+"~"+sv2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametro ::= SIMBOLO SYM_ENIE simbs_varios 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String s = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int svleft = (CUP$Sintactico$stack.peek()).left;
		int svright = (CUP$Sintactico$stack.peek()).right;
		Object sv = CUP$Sintactico$stack.peek().<Object>value();
		RESULT=s+"~"+sv.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque_coma ::= COMA LETRA bloque_coma 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		if(x == null){RESULT="¿"+l;}else{RESULT="¿"+l+x;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque_coma ::= COMA ENTERO bloque_coma 
            {
              Object RESULT =null;
		int eleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		if(x == null){RESULT="¿"+e;}else{RESULT="¿"+e+x;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque_coma ::= COMA SIMBOLO bloque_coma 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String s = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		if(x == null){RESULT="¿"+s;}else{RESULT="¿"+s+x;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque_coma ::= COMA CADENA bloque_coma 
            {
              Object RESULT =null;
		int cleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		if(x == null){RESULT="¿"+c;}else{RESULT="¿"+c+x;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque_coma ::= COMA simbs_varios bloque_coma 
            {
              Object RESULT =null;
		int svleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int svright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object sv = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		if(x == null){RESULT="¿"+sv;}else{RESULT="¿"+sv+x;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque_coma ::= LETRA 
            {
              Object RESULT =null;
		int lleft = (CUP$Sintactico$stack.peek()).left;
		int lright = (CUP$Sintactico$stack.peek()).right;
		String l = CUP$Sintactico$stack.peek().<String>value();
		RESULT=l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque_coma ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = (CUP$Sintactico$stack.peek()).left;
		int eright = (CUP$Sintactico$stack.peek()).right;
		String e = CUP$Sintactico$stack.peek().<String>value();
		RESULT=e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque_coma ::= SIMBOLO 
            {
              Object RESULT =null;
		int sleft = (CUP$Sintactico$stack.peek()).left;
		int sright = (CUP$Sintactico$stack.peek()).right;
		String s = CUP$Sintactico$stack.peek().<String>value();
		RESULT=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque_coma ::= CADENA 
            {
              Object RESULT =null;
		int cleft = (CUP$Sintactico$stack.peek()).left;
		int cright = (CUP$Sintactico$stack.peek()).right;
		String c = CUP$Sintactico$stack.peek().<String>value();
		RESULT=c;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_coma ::= simbs_varios 
            {
              Object RESULT =null;
		int svleft = (CUP$Sintactico$stack.peek()).left;
		int svright = (CUP$Sintactico$stack.peek()).right;
		Object sv = CUP$Sintactico$stack.peek().<Object>value();
		RESULT=sv.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque_coma ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_coma",8, CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simbs_varios ::= MAS 
            {
              Object RESULT =null;
		int mleft = (CUP$Sintactico$stack.peek()).left;
		int mright = (CUP$Sintactico$stack.peek()).right;
		String m = CUP$Sintactico$stack.peek().<String>value();
		RESULT=m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simbs_varios ::= PORCENTAJE 
            {
              Object RESULT =null;
		int pleft = (CUP$Sintactico$stack.peek()).left;
		int pright = (CUP$Sintactico$stack.peek()).right;
		String p = CUP$Sintactico$stack.peek().<String>value();
		RESULT=p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simbs_varios ::= ASTERISCO 
            {
              Object RESULT =null;
		int aleft = (CUP$Sintactico$stack.peek()).left;
		int aright = (CUP$Sintactico$stack.peek()).right;
		String a = CUP$Sintactico$stack.peek().<String>value();
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simbs_varios ::= PREGUNTA 
            {
              Object RESULT =null;
		int prleft = (CUP$Sintactico$stack.peek()).left;
		int prright = (CUP$Sintactico$stack.peek()).right;
		String pr = CUP$Sintactico$stack.peek().<String>value();
		RESULT=pr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simbs_varios ::= MAYORQUE 
            {
              Object RESULT =null;
		int mqleft = (CUP$Sintactico$stack.peek()).left;
		int mqright = (CUP$Sintactico$stack.peek()).right;
		String mq = CUP$Sintactico$stack.peek().<String>value();
		RESULT=mq;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simbs_varios ::= LLAVEIZQ 
            {
              Object RESULT =null;
		int lileft = (CUP$Sintactico$stack.peek()).left;
		int liright = (CUP$Sintactico$stack.peek()).right;
		String li = CUP$Sintactico$stack.peek().<String>value();
		RESULT=li;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simbs_varios ::= LLAVEDER 
            {
              Object RESULT =null;
		int ldleft = (CUP$Sintactico$stack.peek()).left;
		int ldright = (CUP$Sintactico$stack.peek()).right;
		String ld = CUP$Sintactico$stack.peek().<String>value();
		RESULT=ld;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simbs_varios ::= BARRA 
            {
              Object RESULT =null;
		int bleft = (CUP$Sintactico$stack.peek()).left;
		int bright = (CUP$Sintactico$stack.peek()).right;
		String b = CUP$Sintactico$stack.peek().<String>value();
		RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simbs_varios ::= PUNTO 
            {
              Object RESULT =null;
		int ptleft = (CUP$Sintactico$stack.peek()).left;
		int ptright = (CUP$Sintactico$stack.peek()).right;
		String pt = CUP$Sintactico$stack.peek().<String>value();
		RESULT=pt;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simbs_varios ::= DOSPT 
            {
              Object RESULT =null;
		int dosptleft = (CUP$Sintactico$stack.peek()).left;
		int dosptright = (CUP$Sintactico$stack.peek()).right;
		String dospt = CUP$Sintactico$stack.peek().<String>value();
		RESULT=dospt;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simbs_varios ::= GUION 
            {
              Object RESULT =null;
		int gleft = (CUP$Sintactico$stack.peek()).left;
		int gright = (CUP$Sintactico$stack.peek()).right;
		String g = CUP$Sintactico$stack.peek().<String>value();
		RESULT=g;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbs_varios",10, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_regex ::= ASTERISCO bloque_regex 
            {
              Object RESULT =null;
		int asleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int asright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String as = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		RESULT= new Tree_Node("*", (Tree_Node)x, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque_regex ::= PUNTO bloque_regex bloque_regex 
            {
              Object RESULT =null;
		int ptleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ptright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pt = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int xleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		int yleft = (CUP$Sintactico$stack.peek()).left;
		int yright = (CUP$Sintactico$stack.peek()).right;
		Object y = CUP$Sintactico$stack.peek().<Object>value();
		RESULT= new Tree_Node(".", (Tree_Node)x, (Tree_Node)y);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_regex ::= BARRA bloque_regex bloque_regex 
            {
              Object RESULT =null;
		int brleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int brright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String br = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int xleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		int yleft = (CUP$Sintactico$stack.peek()).left;
		int yright = (CUP$Sintactico$stack.peek()).right;
		Object y = CUP$Sintactico$stack.peek().<Object>value();
		RESULT= new Tree_Node("|", (Tree_Node)x, (Tree_Node)y);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_regex ::= MAS bloque_regex 
            {
              Object RESULT =null;
		int mleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		RESULT= new Tree_Node("+", (Tree_Node)x, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque_regex ::= PREGUNTA bloque_regex 
            {
              Object RESULT =null;
		int pleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String p = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<String>value();
		int xleft = (CUP$Sintactico$stack.peek()).left;
		int xright = (CUP$Sintactico$stack.peek()).right;
		Object x = CUP$Sintactico$stack.peek().<Object>value();
		RESULT= new Tree_Node("?", (Tree_Node)x, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque_regex ::= LLAVEIZQ variable LLAVEDER 
            {
              Object RESULT =null;
		int lileft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int liright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String li = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2).<String>value();
		int lleft = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = (CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object l = CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1).<Object>value();
		int ldleft = (CUP$Sintactico$stack.peek()).left;
		int ldright = (CUP$Sintactico$stack.peek()).right;
		String ld = CUP$Sintactico$stack.peek().<String>value();
		String r = li.toString() + l.toString() + ld.toString();RESULT= new Tree_Node(new String(r.toString()), null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque_regex ::= CADENA 
            {
              Object RESULT =null;
		int cleft = (CUP$Sintactico$stack.peek()).left;
		int cright = (CUP$Sintactico$stack.peek()).right;
		String c = CUP$Sintactico$stack.peek().<String>value();
		RESULT=new Tree_Node(new String(c.toString()), null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_regex",4, CUP$Sintactico$stack.peek(), CUP$Sintactico$stack.peek(), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack<java_cup.runtime.Symbol>     CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
